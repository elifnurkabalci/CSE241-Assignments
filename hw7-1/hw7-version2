import java.util.ArrayList;
//import java.util.Scanner;
//import java.lang.Object;
//import java.util.*;

class DayofYearSet {
    public ArrayList<DayofYear> outlist = new ArrayList<>();
    public DayofYearSet(ArrayList<DayofYear> listt){
        totalobj(); // for increase the # of objects
        for(int i=0; i<listt.size(); i++){
            outlist.add(listt.get(i));
        }  
    }
    public DayofYearSet(){
    }
    public String ToString(){
        return this.ToString();
    }
    public boolean equals(DayofYearSet obj){
        boolean result=false;
        int a=0;
        if(obj.outlist.size()==outlist.size()){
            for(int i=0; i<outlist.size(); i++){
                if(obj.outlist.get(i).day==outlist.get(i).day && obj.outlist.get(i).month==outlist.get(i).month) a++;
            }
            if(a==outlist.size()) result=true;
        }
        return result;
    }
    void add(DayofYear element){
        int temp=0;
        for(int i=0; i<outlist.size(); i++){
            if(outlist.get(i).day == element.day && outlist.get(i).month == element.month){
                temp=1;
            }
        }
        if(temp==0) outlist.add(element);
        else System.out.println("This element already exist");
    }
    void remove(DayofYear element){
        int temp=outlist.size();
        for(int i=0; i<outlist.size(); i++){
            if(outlist.get(i).day == element.day && outlist.get(i).month == element.month){
                temp=i;
            }
        }
        if(temp== outlist.size()) System.out.println("This element does not exist");
        else outlist.remove(temp);
    }
    int size(){
        int i=0;
        while(outlist.get(i).day>0 && outlist.get(i).month>0){
            i++;
        }
        return i;
    }
    static int totalobj(){
        final int result = 0;
        return result+1;
    }
    DayofYearSet union(DayofYearSet obj1, DayofYearSet obj2){ // +
        var newobj = new DayofYearSet();
        newobj.outlist.addAll(obj1.outlist);
        for(int k=0; k<obj2.outlist.size(); k++){
            boolean temp=false;
            for(int j=0; j<obj1.outlist.size(); j++){
                if(obj1.outlist.get(j).day == obj2.outlist.get(k).day && obj1.outlist.get(j).month == obj2.outlist.get(k).month) temp=true;
            }
            if(temp==false){
                newobj.outlist.add(obj2.outlist.get(k));
            }
        }
        return newobj;
    }
    DayofYearSet difference(DayofYearSet obj1, DayofYearSet obj2){ // -
        var newobj = new DayofYearSet();
        for(int i=0; i<obj1.outlist.size(); i++){
            boolean temp=false;
            for(int j=0; j<obj2.outlist.size(); j++){
                if(obj1.outlist.get(i).day == obj2.outlist.get(j).day && obj1.outlist.get(i).month == obj2.outlist.get(j).month) temp=true;
            }
            if(temp==false){
                newobj.outlist.add(obj1.outlist.get(i));
            }
        }
        return newobj;
    }
    DayofYearSet intersection(DayofYearSet obj1, DayofYearSet obj2){ // ^
        var newobj = new DayofYearSet();
        for(int i=0; i<obj1.outlist.size(); i++){
            for(int j=0; j<obj2.outlist.size(); j++){
                if(obj1.outlist.get(i).day == obj2.outlist.get(j).day && obj1.outlist.get(i).month == obj2.outlist.get(j).month){
                    newobj.outlist.add(obj1.outlist.get(i));
                }
            }
        }
        return newobj;
    }
    DayofYearSet complement(DayofYearSet obj){ // !
        var newobj = new DayofYearSet();
        int k=0;
        for(int i=1; i<=12; i++){
            if(i==1 || i==3 || i==5 || i==7 || i==8 || i==10 || i==12) k=31;
            else if(i==2) k=28;
            else if(i==4 || i==6 || i==9 || i==11) k=30;
            for(int j=1; j<=k; j++){
                DayofYear element= new DayofYear();
                element.day=j;
                element.month=i;
                newobj.outlist.add(element);
            }
        }
        for(int i=0; i<outlist.size(); i++){
            for(int j=0; j<365; j++){
                if(obj.outlist.get(i).day == newobj.outlist.get(j).day && obj.outlist.get(i).month == newobj.outlist.get(j).month){
                    newobj.outlist.remove(j);
                }
            }
        }
        return newobj;
    }
    boolean DeMorgan(DayofYearSet obj1, DayofYearSet obj2){
        return complement(union(obj1,obj2)) == intersection(complement(obj1),complement(obj2));
    }
}
class DayofYear extends DayofYearSet{
    public int day,month;
    public DayofYear(ArrayList<DayofYear> listt) {
        super(listt);
    }
    public DayofYear(){
    }
    public static void main(String[] args){
        ArrayList<DayofYear> listt = new ArrayList<>();
        DayofYearSet d1 = new DayofYearSet(listt);
        DayofYear element = new DayofYear(listt);
        element.day=15; element.month=1;
        d1.add(element);
        System.out.println("selam");
        
    }
}
